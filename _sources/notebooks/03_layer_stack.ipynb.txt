{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Layers\n",
    "\n",
    "gdsfactory includes a generic example Technology in `gdsfactory.tech` that you can use as an inspiration to create your own.\n",
    "\n",
    "![](https://i.imgur.com/GUb1Kav.png)\n",
    "\n",
    "\n",
    "A GDS has different layers to describe the different fabrication process steps.\n",
    "\n",
    "GDS layers have 2 integer numbers: GDSlayer, GDSpurpose\n",
    "\n",
    "Klayout shows Layers with a color, style and transparency when showing GDS layouts."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import gdsfactory as gf\n",
    "\n",
    "# gf.CONF.plotter = 'holoviews'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "c = gf.layers.LAYER_COLORS.preview()\n",
    "c"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "layer_wg = gf.LAYER.WG\n",
    "print(layer_wg)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Remove layers\n",
    "\n",
    "You can remove layers using the `remove_layers()` function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "removed = c.remove_layers(layers=(gf.LAYER.WG, gf.LAYER.WGN))\n",
    "removed"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Remap layers\n",
    "\n",
    "You can remap (change the polygons from one layer to another layer) using the `remap_layer`, which will return a new `Component`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "c = gf.components.straight(layer=(2, 0))\n",
    "c"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "remap = c.remap_layers(layermap={(2, 0): gf.LAYER.WGN})\n",
    "remap"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Extract layers\n",
    "\n",
    "You can also extract layers using the `extract` function. This function returns a new flattened Component that contains the extracted layers.\n",
    "A flat Component does not have references, and all the polygons are absorbed by the top cell."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "extract = c.extract(layers=(gf.LAYER.M1,))\n",
    "extract"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import gdsfactory as gf\n",
    "\n",
    "c = gf.components.straight(layer=(41, 0))\n",
    "c"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "cross_section = gf.cross_section.nitride\n",
    "wg = gf.components.straight(cross_section=cross_section)\n",
    "gc = gf.components.grating_coupler_elliptical_te(\n",
    "    layer=(34, 0), cross_section=cross_section\n",
    ")\n",
    "wg_gc = gf.routing.add_fiber_single(\n",
    "    component=wg,\n",
    "    grating_coupler=gc,\n",
    "    cross_section=gf.cross_section.nitride,\n",
    "    with_loopback=False,\n",
    ")\n",
    "\n",
    "# Loopback is an alignment structure where two gratings are connected back to back\n",
    "wg_gc"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## LayerStack\n",
    "\n",
    "Each layer also includes the information of thickness and position of each layer.\n",
    "\n",
    "This LayerStack can be used for:\n",
    "\n",
    "- render a 3D image\n",
    "- FDTD simulations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "c = gf.layers.LAYER_COLORS.preview()\n",
    "c"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from gdsfactory.tech import LayerStack, LayerLevel, LAYER\n",
    "\n",
    "\n",
    "def get_layer_stack_generic(\n",
    "    thickness_silicon_core: float = 220e-3, thickness_cladding: float = 3.0\n",
    ") -> LayerStack:\n",
    "    \"\"\"Returns generic LayerStack.\n",
    "    based on paper https://www.degruyter.com/document/doi/10.1515/nanoph-2013-0034/html\n",
    "    \"\"\"\n",
    "    return LayerStack(\n",
    "        layers=dict(\n",
    "            core=LayerLevel(\n",
    "                layer=LAYER.WG,\n",
    "                thickness=thickness_silicon_core,\n",
    "                zmin=0.0,\n",
    "                material=\"si\",\n",
    "            ),\n",
    "            clad=LayerLevel(\n",
    "                layer=LAYER.WGCLAD,\n",
    "                thickness=thickness_cladding,\n",
    "                zmin=0.0,\n",
    "                material=\"sio2\",\n",
    "            ),\n",
    "            slab150=LayerLevel(\n",
    "                layer=LAYER.SLAB150,\n",
    "                thickness=150e-3,\n",
    "                zmin=0,\n",
    "                material=\"si\",\n",
    "            ),\n",
    "            slab90=LayerLevel(\n",
    "                layer=LAYER.SLAB90,\n",
    "                thickness=90e-3,\n",
    "                zmin=0.0,\n",
    "                material=\"si\",\n",
    "            ),\n",
    "            nitride=LayerLevel(\n",
    "                layer=LAYER.WGN,\n",
    "                thickness=350e-3,\n",
    "                zmin=220e-3 + 100e-3,\n",
    "                material=\"sin\",\n",
    "            ),\n",
    "            ge=LayerLevel(\n",
    "                layer=LAYER.GE,\n",
    "                thickness=500e-3,\n",
    "                zmin=thickness_silicon_core,\n",
    "                material=\"ge\",\n",
    "            ),\n",
    "            via_contact=LayerLevel(\n",
    "                layer=LAYER.VIAC,\n",
    "                thickness=1100e-3,\n",
    "                zmin=90e-3,\n",
    "                material=\"Aluminum\",\n",
    "            ),\n",
    "            metal1=LayerLevel(\n",
    "                layer=LAYER.M1,\n",
    "                thickness=750e-3,\n",
    "                zmin=thickness_silicon_core + 1100e-3,\n",
    "                material=\"Aluminum\",\n",
    "            ),\n",
    "            heater=LayerLevel(\n",
    "                layer=LAYER.HEATER,\n",
    "                thickness=750e-3,\n",
    "                zmin=thickness_silicon_core + 1100e-3,\n",
    "                material=\"TiN\",\n",
    "            ),\n",
    "            viac=LayerLevel(\n",
    "                layer=LAYER.VIA1,\n",
    "                thickness=1500e-3,\n",
    "                zmin=thickness_silicon_core + 1100e-3 + 750e-3,\n",
    "                material=\"Aluminum\",\n",
    "            ),\n",
    "            metal2=LayerLevel(\n",
    "                layer=LAYER.M2,\n",
    "                thickness=2000e-3,\n",
    "                zmin=thickness_silicon_core + 1100e-3 + 750e-3 + 1.5,\n",
    "                material=\"Aluminum\",\n",
    "            ),\n",
    "        )\n",
    "    )\n",
    "\n",
    "\n",
    "layer_stack220 = get_layer_stack_generic(thickness_silicon_core=0.220)\n",
    "\n",
    "c = gf.components.straight_heater_metal(length=40)\n",
    "c"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "scene = gf.export.to_3d(\n",
    "    component=c, layer_colors=gf.layers.LAYER_COLORS, layer_stack=layer_stack220\n",
    ")\n",
    "scene.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# lets assume we have 9um silicon instead of 0.220um, You will see a much thicker waveguide under the metal heater.\n",
    "layer_stack9000 = get_layer_stack_generic(thickness_silicon_core=9.0)\n",
    "scene = gf.export.to_3d(\n",
    "    component=c, layer_colors=gf.layers.LAYER_COLORS, layer_stack=layer_stack9000\n",
    ")\n",
    "scene.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3D rendering\n",
    "\n",
    "To render components in 3D you will need to define two things:\n",
    "\n",
    "1. LayerStack: for each layer contains thickness of each material and z position\n",
    "2. LayerColors: for each layer contains colors (this file is the same that Klayout uses). You can load it with `gf.layers.load_lyp()`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "heater = gf.components.straight_heater_metal(length=50)\n",
    "heater"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "scene = gf.export.to_3d(component=heater, layer_colors=gf.layers.LAYER_COLORS)\n",
    "scene.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
